import pandas as pd
from math import *
from colorama import Fore
def en(value_n):
   e = value_n*log2(value_n)
   return(e)
base = [[0.14,0.06,0.05,0.08,0.13,0.04,0.01,0.09,0.15,0.02,0.11,0.12],
              [0.11,0.05,0.09,0.10,0.12,0.03,0.02,0.08,0.15,0.07,0.14,0.04],
              [0.13,0.07,0.05,0.06,0.15,0.04,0.11,0.02,0.12,0.16,0.08,0.01],
              [0.07,0.14,0.04,0.02,0.08,0.15,0.10,0.12,0.03,0.11,0.05,0.09],
              [0.16,0.08,0.01,0.11,0.02,0.12,0.06,0.15,0.04,0.13,0.07,0.05],
              [0.01,0.09,0.15,0.02,0.11,0.12,0.14,0.06,0.05,0.08,0.13,0.04],
              [0.02,0.08,0.15,0.07,0.14,0.04,0.13,0.07,0.05,0.06,0.15,0.04],
              [0.11,0.02,0.12,0.16,0.08,0.01,0.07,0.05,0.13,0.06,0.15,0.04],
              [0.06,0.05,0.14,0.13,0.04,0.08,0.15,0.01,0.09,0.12,0.02,0.11],
              [0.09,0.11,0.05,0.03,0.10,0.12,0.15,0.02,0.08,0.14,0.04,0.07],
              [0.05,0.13,0.07,0.15,0.04,0.06,0.02,0.12,0.11,0.04,0.07,0.14],
              [0.12,0.02,0.11,0.09,0.15,0.01,0.13,0.04,0.08,0.06,0.05,0.14],
              [0.14,0.04,0.07,0.15,0.02,0.08,0.03,0.10,0.12,0.09,0.11,0.05],
              [0.04,0.07,0.14,0.02,0.12,0.11,0.15,0.04,0.06,0.05,0.13,0.07],
              [0.05,0.07,0.13,0.04,0.15,0.06,0.12,0.02,0.11,0.01,0.08,0.16],
              [0.1,0.03,0.05,0.09,0.14,0.04,0.01,0.08,0.16,0.04,0.12,0.14],
              [0.12,0.07,0.08,0.11,0.16,0.01,0.04,0.06,0.13,0.09,0.1,0.03],
              [0.11,0.08,0.07,0.04,0.14,0.05,0.13,0.02,0.1,0.15,0.09,0.02],
              [0.03,0.12,0.14,0.02,0.08,0.15,0.1,0.11,0.03,0.12,0.05,0.05],
              [0.08,0.13,0.05,0.01,0.06,0.14,0.11,0.13,0.06,0.1,0.04,0.09],
              [0.15,0.09,0.02,0.13,0.02,0.1,0.08,0.16,0.01,0.12,0.06,0.06],
              [0.03,0.11,0.16,0.05,0.14,0.15,0.09,0.01,0.04,0.07,0.13,0.02],
              [0.06,0.01,0.12,0.09,0.16,0.02,0.11,0.03,0.08,0.05,0.15,0.12]]
j = pd.DataFrame(base)
print(Fore.LIGHTGREEN_EX+'Исходные данные:\n',j)
base2 = [0.14,0.06,0.05,0.08,0.13,0.04,0.01,0.09,0.15,0.02,0.11,0.12,0.11,0.05,0.09,0.10,0.12,0.03,0.02,0.08,0.15,0.07,0.14,0.0,0.13,0.07,0.05,0.06,0.15,
         0.04,0.11,0.02,0.12,0.16,0.08,0.0,0.07,0.14,0.04,0.02,0.08,0.15,0.10,0.12,0.03,0.11,0.05,0.04,0.16,0.08,0.01,0.11,0.02,0.12,0.06,0.15,0.04,0.13,
         0.07,0.01,0.01,0.09,0.15,0.02,0.11,0.12,0.14,0.06,0.05,0.08,0.13,0.09,0.02,0.08,0.15,0.07,0.14,0.04,0.13,0.07,0.05,0.06,0.15,0.05,0.11,0.02,0.12,
         0.16,0.08,0.01,0.07,0.05,0.13,0.06,0.15,0.04,0.06,0.05,0.14,0.13,0.04,0.08,0.15,0.01,0.09,0.12,0.02,0.14,0.09,0.11,0.05,0.03,0.10,0.12,0.15,0.02,
         0.08,0.14,0.04,0.04,0.05,0.13,0.07,0.15,0.04,0.06,0.02,0.12,0.11,0.04,0.07,0.11,0.12,0.02,0.11,0.09,0.15,0.01,0.13,0.04,0.08,0.06,0.05,0.17,0.14,
         0.04,0.07,0.15,0.02,0.08,0.03,0.10,0.12,0.09,0.11,0.04,0.04,0.07,0.14,0.02,0.12,0.11,0.15,0.04,0.06,0.05,0.13,0.04,0.05,0.07,0.13,0.04,0.15,0.06,
         0.12,0.02,0.11,0.01,0.08,0.15,0.1,0.03,0.05,0.09,0.14,0.04,0.01,0.08,0.16,0.04,0.12,0.14,0.12,0.07,0.08,0.11,0.16,0.01,0.04,0.06,0.13,0.09,0.1,0.03,
         0.11,0.08,0.07,0.04,0.14,0.05,0.13,0.02,0.1,0.15,0.09,0.02,0.03,0.12,0.14,0.02,0.08,0.15,0.1,0.11,0.03,0.12,0.05,0.05,0.08,0.13,0.05,0.01,0.06,0.14,
         0.11,0.13,0.06,0.1,0.04,0.09,0.15,0.09,0.02,0.13,0.02,0.1,0.08,0.16,0.01,0.12,0.06,0.06,0.03,0.11,0.16,0.05,0.14,0.15,0.09,0.01,0.04,0.07,0.13,0.02,
         0.06,0.01,0.12,0.09,0.16,0.02,0.11,0.03,0.08,0.05,0.15,0.12]
myset = set(base2)
jj = sorted(myset, reverse=True)
print(Fore.LIGHTBLACK_EX+'',myset,'\n',jj)
jj0,jj1,jj2,jj3,jj4,jj5,jj6,jj7,jj8,jj9,jj10,jj11,jj12=jj[0],jj[1],jj[2],jj[3],jj[4],jj[5],jj[6],jj[7],jj[8],jj[9],jj[10],jj[11],jj[12]
print(Fore.LIGHTMAGENTA_EX+'Задание 1\n\n')
print(Fore.LIGHTBLUE_EX+'''Код Шеннона-Фано для первичного алфавита
Символ | Вероятность | Код
S1       {0}          0000
S2       {1}          0001
S3       {2}          0010
S4       {3}          0011
S5       {4}          010*
S6       {5}          011*
S7       {6}          011*
S8       {7}           1000
S9       {8}          1001
S10      {9}          1011
S11      {10}          1100
S12      {11}          1101
S13      {12}          111*'''.format(jj0,jj1,jj2,jj3,jj4,jj5,jj6,jj7,jj8,jj9,jj10,jj11,jj12))
print('''Двоичное дерево:
              0_________________1
              |                 |
        0_____|__1           0__|______________1
       |         |           |                 |
    0__|___1   0_|__1     0__|____1        0___|_____1
   |       |   |    |     |       |        |         |
   |       |  S5    S6    |       |        |         |
 0_|_1   0_|_1         0__|_1   0_|_1    0_|_1       |
 |   |   |   |         |    |   |   |    |   |       |
 |   |   |   |         |    |   |   |    |   |       |
S1  S2  S3  S4        S7   S8  S9  S10  S11 S12     S13
''')
df = pd.DataFrame({'A': ["00", "10", "00", "00",    "00",  "0000",  "00", "0000", "00", "00",    "00", "0000"],
                   'B': ["01", "00", "11", "11",    "11",  "0001",  "11", "0001", "11", "11",    "10", "10"],
                   'C': ["10", "11", "100", "100",  "100", "0010",  "100","0010", "100","100",   "01", "0010"],
                   'D': ["11", "01", "01",  "101",  "101", "0011",  "101","1010", "101","101",   "110", "11110"],
                   'E': ["-", "-",   "101",  "-",   "01",  "01",    "01", "0011", "01", "01",    "1110","0011"],
                   'F': ["-", "-",   "01",  "-",    "10",  "10110", "10", "01",   "-",  "-",     "1111","01"],
                   'G': ["-", "-",   "-",   "-",    "-",   "10111", "-",  "10110","-",  "-",     "-",   "11"],
                   'I': ["-", "-",   "-",   "-",    "-",   "11000", "-",  "10111","-",  "-",     "-",   "111000"],
                   'J': ["-", "-",   "-",   "-",    "-",   "10101", "-",  "11000","-",  "-",     "-",   "1110010"],
                   'K': ["-", "-",   "-",   "10",   "-",   "10",    "-",  "10",   "10", "-",     "-",   "11101"],
                   'L': ["-", "-",   "-",   "-",    "-",   "11001", "-",  "11001","-",  "-",     "-",   "11111"]})
print(Fore.RED+"Двоичный код в форме таблицы:\n{}\n".format(df))
print(Fore.LIGHTMAGENTA_EX+"Задание 2\n\n"+Fore.RED+'''Вариант 1:
        *
       / |
      *   E
     / |
    *   D
   / |
  A   B
Вариант 2:

        *
       / |
      *   E
     / |
    *   D
   / |
  C   A
Вариант 3:
Дерево Хаффмана:

        *
       / |
      *   F
     / |
    *   D
   / |
  A   B
     / |
    C   E
Вариант 4:

        *
       / |
      *   K
     / |
    *   E
   / |
  A   B
     / |
    C   D
Вариант 5

        *
       / |
      *   F
     / |
    *   E
   / |
  A   B
     / |
    C   D
Вариант 6:

        *
       / |
      *   K
     / |
    *   F
   / |
  A   B
     / |
    C   E
       / |
      D   J
         / |
        G   H
           / |
          I   L

        *
       / |
      *   F
     / |
    *   E
   / |
  A   B
     / |
    C   D
Вариант 8:
        *
       / |
      *   K
     / |
    *   F
   / |
  A   B
     / |
    C   E
       / |
      D   J
         / |
        G   H
           / |
          I   L
Вариант 9
        *
       / |
      *   K
     / |
    *   E
   / |
  A   B
     / |
    C   D
Вариант 10:

         *
       /  |
      *   F
     /   |
    *   E
   /  |
  A   B
     / |
    C   D
Вариант 11:

        *
       /  |
      *   C
     /  |
    *   B
   /  |
  A   D
     / |
    E   F
Вариант 12:
        *_
       /  |
      *   G
     / _
        |
    *   B
   / |
  A   F
     / |
    C   E
       / |
      D   L
         / |
        H   K
           / |
          I   J
'''.format(df))
ntrp = en(jj0)+en(jj1)+en(jj2)+en(jj3)+en(jj4)+en(jj5)+en(jj6)+en(jj7)+en(jj8)+en(jj9)+en(jj10)+en(jj11)+en(jj12)
vgln = sum(jj)*2 / ntrp
effc = ntrp / vgln
print(Fore.LIGHTGREEN_EX+"Задание 3")
print(Fore.LIGHTBLACK_EX+"")
print("Эффективность кода Keff = entropy / avg_len = {0} / {1} = {2}".format(ntrp, vgln, effc))